/** buildConfigDefault.js - Configuration defaults for the Overware build
  *************************
  * Do not edit this file in an attempt to personalize your build.  It assigns default
  * values to all configuration variables.  Instead edit your own configuration file as
  * instructed in buildConfig.js.
  */

    var bc = ov.build.config;
    var version = '0.0';



 // androidBuildToolsLoc
 // ---------------------
 // The pathname of the build-tools directory of the Android SDK, where tools such as aapt
 // and dx reside.  For example:
 //
 //     bc.androidBuildToolsLoc = bc.androidSDKLoc + '/build-tools/22.0.1';
 //
 // If set to an empty string '', the tools will instead be sought on the execution PATH.

    bc.androidBuildToolsLoc = ''; // must not contain spaces [1]



 // androidSDKLoc
 // --------------
 // The pathname of the Android SDK installation directory.

    var v = $ENV.ANDROID_HOME; // default to environment variable ANDROID_HOME
    if( !v )
    {
        var osTag = ov.osTag();
        if( osTag == 'mac' ) v = '/usr/local/Cellar/android-sdk'; // Homebrew installation
        else if( osTag == 'win' )
        {
            v = ov.slashed(ov.userHomeLoc()) + 'AppData\\Local\\Android\\android-sdk';
              // default for the Windows installer
        }
        else v = '/opt/android-sdk'; // Arch Linux and (if I recall) Gentoo
    }
    bc.androidSDKLoc = v; // must not contain spaces [1]



 // androidVersion
 // ---------------
 // The numerical version of the Android API to build against.  It should normally be the
 // latest installed by the SDK manager.  Look for this directory:
 //
 //     {androidSDKLoc} / platforms / android-{androidVersion}

    bc.androidVersion = 22;



 // appPackageName
 // --------------
 // The unique name under which you intend to publish your build of the Android app.  The
 // build script will write this name into the 'package' attribute of the app manifest.
 // http://developer.android.com/guide/topics/manifest/manifest-element.html#package
 //
 // Although it looks like a Java-style package name, this name need not (and should not)
 // match the Java source package "overware.top.android".  Instead read the instructions
 // linked above, and choose a unique name before publishing your build.

    bc.appPackageName = 'com.example.overware';



 // sourceMatcher
 // -------------
 // Returns true if the file is a proper Overware source file.  Use this as necessary to
 // screen the build process from personal files added to the Overware installation.

    bc.sourceMatcher = new (Java.type('java.nio.file.PathMatcher'))(
    {
        matches: function( path ) { return true; } // by default, no filtering is needed
    });



 // jdkBinLoc
 // ----------
 // The pathname of the Oracle JDK bin directory, where tools such as javac reside.  If
 // this is an empty string '', then the tools are sought on the execution PATH.

    bc.jdkBinLoc = ''; // must not contain spaces [1]



 // jdkVersion
 // ----------
 // The required minimum version of the JDK.

    bc.jdkVersion = 1.8;



 // productLoc
 // ----------
 // The output directory for the build process.  Target "clean" deletes this directory
 // together with its contents, while others recreate it as needed.

    bc.productLoc = 'overware-' + version;



 // version
 // -------
 // The version of Overware.

    bc.version = version;


// Note
// -----

//   [1] Executable file paths must not contain spaces.  The script engine will fail to
//       execute them owing to a bug.  https://bugs.openjdk.java.net/browse/JDK-8049300
//
//       For example, "C:\Program Files\fu\bar.exe" will fail to execute.  As a temporary
//       workaround until the bug is fixed, consider creating a symbolic link to the
//       offending portion of the path.  For example:
//
//           mklink /D C:\Program "C:\Program Files"
//
//       Then you could specify the path as "C:\Program\fu\bar.exe", for example.
