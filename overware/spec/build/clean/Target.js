/** Target.js - Definition of the 'clean' build target
  *************
  * Deletes all files generated by previous builds.
  *
  *     $ overware/build -- clean
  *     $ overware/build -- clean TARGET...
  */
if( !overware.spec.build.clean.Target ) {
     overware.spec.build.clean.Target = {};
load( overware.Overware.ulocTo( 'overware/spec/build/Build.js' ));
( function()
{
    var our = overware.spec.build.clean.Target; // public as overware.spec.build.clean.Target

    var Build = overware.spec.build.Build;
    var Files = Java.type( 'java.nio.file.Files' );
    var FileVisitResult = Java.type( 'java.nio.file.FileVisitResult' );
    var Paths = Java.type( 'java.nio.file.Paths' );
    var SimpleFileVisitor = Java.type( 'java.nio.file.SimpleFileVisitor' );
    var System = Java.type( 'java.lang.System' );

    var CONTINUE = FileVisitResult.CONTINUE;



//// P u b l i c /////////////////////////////////////////////////////////////////////////


    /** Builds this target.
      */
    our.build = function()
    {
        var outS = System.out;
        var locs = { tmp: Build.tmpLoc(), release: overware.spec.build.BuildConfig.productLoc };
        for( var l in locs )
        {
            var dir = Paths.get( locs[l] );
            if( !Files.exists( dir )) continue;

            outS.append( Build.indentation() ).append( '(' ).append( l ).append( '.. ' );
            var count = 0;
            Files.walkFileTree( dir, new (Java.extend( SimpleFileVisitor ))
            {
                postVisitDirectory: function( dir, x )
                {
                    if( x ) throw x;

                    Files.delete( dir );
                    ++count;
                    return CONTINUE;
                },

                visitFile: function( file, att )
                {
                    Files.delete( file );
                    ++count;
                    return CONTINUE;
                }
            });
            count = count.intValue(); // [2]
            outS.append( '\b\b\b ' ).println( count );
        }
    };



}() );
    // still under this module's load guard at top
}


// Copyright 2015, Michael Allan.  Licence MIT-Overware.
